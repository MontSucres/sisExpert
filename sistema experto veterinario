import sqlite3
import tkinter as tk
from tkinter import messagebox, ttk, scrolledtext

class SistemaExpertoVeterinario:
    def __init__(self):
        # Configuraci√≥n de base de datos
        self.conn = sqlite3.connect('sistema_veterinario.db')
        self.crear_base_datos()
        self.cargar_datos_iniciales()
        
        # Interfaz Gr√°fica
        self.ventana_principal = tk.Tk()
        self.ventana_principal.title("Sistema Experto Veterinario")
        self.ventana_principal.geometry("800x900")
        self.ventana_principal.configure(bg='#F0F4F8')  # Light blue-gray background
        
        self.inicializar_interfaz()
    
    def crear_base_datos(self):
        # [Database creation code remains the same as in the previous version]
        cursor = self.conn.cursor()
        
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS enfermedades (
            id INTEGER PRIMARY KEY,
            nombre TEXT UNIQUE,
            descripcion TEXT
        )
        ''')
        
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS sintomas (
            id INTEGER PRIMARY KEY,
            nombre TEXT UNIQUE
        )
        ''')
        
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS enfermedad_sintomas (
            enfermedad_id INTEGER,
            sintoma_id INTEGER,
            peso REAL,
            FOREIGN KEY(enfermedad_id) REFERENCES enfermedades(id),
            FOREIGN KEY(sintoma_id) REFERENCES sintomas(id)
        )
        ''')
        
        self.conn.commit()
    
    def cargar_datos_iniciales(self):
        # [Data initialization remains the same as in the previous version]
        # (The list of diseases and symptoms from the previous artifact)
        pass
    
    def inicializar_interfaz(self):
        # Frame principal con estilo mejorado
        frame_principal = tk.Frame(self.ventana_principal, padx=30, pady=30, bg='#F0F4F8')
        frame_principal.pack(fill=tk.BOTH, expand=True)
        
        # T√≠tulo con estilo moderno
        titulo = tk.Label(
            frame_principal, 
            text="Sistema Experto Veterinario", 
            font=("Helvetica", 20, "bold"),
            fg='#2C3E50',  # Dark blue-gray color
            bg='#F0F4F8'
        )
        titulo.pack(pady=20)
        
        # Frame para s√≠ntomas con scroll
        frame_sintomas = tk.Frame(frame_principal, bg='#FFFFFF', borderwidth=2, relief=tk.RAISED)
        frame_sintomas.pack(fill=tk.BOTH, expand=True, pady=10)
        
        # T√≠tulo de s√≠ntomas
        titulo_sintomas = tk.Label(
            frame_sintomas, 
            text="Seleccione los S√≠ntomas", 
            font=("Helvetica", 14),
            fg='#2C3E50',
            bg='#FFFFFF'
        )
        titulo_sintomas.pack(pady=(10,15))
        
        # Canvas con scrollbar para s√≠ntomas
        canvas = tk.Canvas(frame_sintomas, bg='#FFFFFF')
        scrollbar = ttk.Scrollbar(frame_sintomas, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg='#FFFFFF')
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Obtener s√≠ntomas de la base de datos
        cursor = self.conn.cursor()
        cursor.execute("SELECT DISTINCT nombre FROM sintomas ORDER BY nombre")
        sintomas = [row[0] for row in cursor.fetchall()]
        
        # Variables de control para checkboxes
        self.vars_sintomas = {}
        for sintoma in sintomas:
            var = tk.BooleanVar()
            self.vars_sintomas[sintoma] = var
            checkbox = tk.Checkbutton(
                scrollable_frame, 
                text=sintoma, 
                variable=var, 
                onvalue=True, 
                offvalue=False,
                font=("Arial", 10),
                fg='#34495E',
                bg='#FFFFFF',
                activebackground='#E0E0E0'
            )
            checkbox.pack(anchor=tk.W, padx=20, pady=5)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Bot√≥n de diagn√≥stico con estilo
        boton_diagnostico = tk.Button(
            frame_principal, 
            text="Realizar Diagn√≥stico", 
            command=self.realizar_diagnostico,
            font=("Helvetica", 12, "bold"),
            bg='#3498DB',  # Bright blue
            fg='white',
            activebackground='#2980B9',
            activeforeground='white',
            padx=20,
            pady=10,
            relief=tk.RAISED,
            borderwidth=2
        )
        boton_diagnostico.pack(pady=20)
        
        # √Årea de resultados con scrolledtext
        resultado_frame = tk.Frame(frame_principal, bg='#F0F4F8')
        resultado_frame.pack(fill=tk.BOTH, expand=True)
        
        resultado_label = tk.Label(
            resultado_frame, 
            text="Resultados del Diagn√≥stico", 
            font=("Helvetica", 14),
            fg='#2C3E50',
            bg='#F0F4F8'
        )
        resultado_label.pack(pady=(0,10))
        
        self.resultado_texto = scrolledtext.ScrolledText(
            resultado_frame, 
            height=10, 
            width=70,
            font=("Arial", 10),
            bg='#FFFFFF',
            fg='#2C3E50',
            borderwidth=2,
            relief=tk.SUNKEN
        )
        self.resultado_texto.pack(pady=10, padx=20, fill=tk.BOTH, expand=True)
    
    def realizar_diagnostico(self):
        # [Diagnostic method remains the same as in the previous version]
        # Obtener s√≠ntomas seleccionados
        sintomas_seleccionados = [
            sintoma for sintoma, var in self.vars_sintomas.items() if var.get()
        ]
        
        if not sintomas_seleccionados:
            messagebox.showwarning("Advertencia", "Seleccione al menos un s√≠ntoma")
            return
        
        # Consulta para calcular probabilidades de enfermedades
        cursor = self.conn.cursor()
        
        # Preparar consulta din√°mica basada en s√≠ntomas seleccionados
        placeholders = ','.join(['?'] * len(sintomas_seleccionados))
        
        consulta = f"""
        SELECT 
            e.nombre AS enfermedad, 
            SUM(es.peso) AS probabilidad,
            e.descripcion
        FROM 
            enfermedades e
        JOIN 
            enfermedad_sintomas es ON e.id = es.enfermedad_id
        JOIN 
            sintomas s ON es.sintoma_id = s.id
        WHERE 
            s.nombre IN ({placeholders})
        GROUP BY 
            e.nombre, e.descripcion
        ORDER BY 
            probabilidad DESC
        """
        
        cursor.execute(consulta, sintomas_seleccionados)
        resultados = cursor.fetchall()
        
        # Calcular probabilidades relativas
        if resultados:
            total_probabilidad = sum(prob for _, prob, _ in resultados)
            
            # Limpiar √°rea de resultados
            self.resultado_texto.delete(1.0, tk.END)
            
            # Mostrar resultados
            self.resultado_texto.insert(tk.END, "ü©∫ Diagn√≥stico Preliminar:\n\n", "title")
            
            for enfermedad, prob, descripcion in resultados:
                probabilidad_porcentaje = (prob / total_probabilidad) * 100
                self.resultado_texto.insert(
                    tk.END, 
                    f"üìå Enfermedad: {enfermedad}\n", "enfermedad"
                )
                self.resultado_texto.insert(
                    tk.END, 
                    f"üìä Probabilidad: {probabilidad_porcentaje:.2f}%\n", "probabilidad"
                )
                self.resultado_texto.insert(
                    tk.END, 
                    f"‚ÑπÔ∏è Descripci√≥n: {descripcion}\n\n", "descripcion"
                )
            
            # Configurar etiquetas para formateo
            self.resultado_texto.tag_config("title", 
                font=("Helvetica", 14, "bold"), 
                foreground="#2C3E50", 
                spacing1=10, 
                spacing3=10
            )
            self.resultado_texto.tag_config("enfermedad", 
                font=("Arial", 12, "bold"), 
                foreground="#3498DB"
            )
            self.resultado_texto.tag_config("probabilidad", 
                font=("Arial", 11), 
                foreground="#2ECC71"
            )
            self.resultado_texto.tag_config("descripcion", 
                font=("Arial", 10), 
                foreground="#34495E"
            )
            
            self.resultado_texto.insert(
                tk.END, 
                "\n‚ö†Ô∏è Nota: Este diagn√≥stico es solo referencial. " 
                "Consulte a un veterinario profesional.", "nota"
            )
            self.resultado_texto.tag_config("nota", 
                font=("Arial", 10, "italic"), 
                foreground="#7F8C8D"
            )
            
            self.resultado_texto.config(state=tk.DISABLED)  # Hacer texto no editable
        else:
            messagebox.showinfo("Resultado", "No se encontraron coincidencias.")
    
    def ejecutar(self):
        self.ventana_principal.mainloop()

def main():
    sistema = SistemaExpertoVeterinario()
    sistema.ejecutar()

if __name__ == "__main__":
    main()
